y <- sin(x) + rnorm(length(x), sd = 0.3)
plot(x, y)
# gradient boosted decision trees
bst <- rpartBoost(X = x, y = y, num_trees = 1000, learn_rate = 0.1,
tree_depth = 3, verbose = TRUE)
# Plot first 15 iterations
par(mfrow = c(3, 3))
for (i in c(0, 5, 10, 15, 25, 50, 100, 500, 1000)) {
plotIter(bst, iter = i, main = paste("Iter:", i))
}
bst <- rpartBoost(X = x, y = y, num_trees = 1000, learn_rate = 0.1,
tree_depth = 3, verbose = FALSE)
par(mfrow = c(3, 3))
for (i in c(0, 5, 10, 15, 20, 25, 30, 35, 40)) {
plotIter(bst, iter = i, main = paste("Iter:", i))
}
par(mfrow = c(4, 4))
for (i in 0:11) {
plotIter(bst, iter = i, main = paste("Iter:", i))
}
par(mfrow = c(3, 3))
for (i in c(0, 5, 10, 20, 40, 80, 160, 320, 640)) {
plotIter(bst, iter = i, main = paste("Iter:", i))
}
for (i in c(0, 5, 10, 15, 25, 50, 100, 500, 1000)) {
plotIter(bst, iter = i, main = paste("Iter:", i))
}
bst
class(bst)
bst[1]
bst[1,1]
bst[1:2,1:2]
bst[,1:2]
bst
as.data.frame(bs)
as.data.frame(bst)
library(tidyverse)
as.data.frame(bst) %>% gather()
as.data.frame(bst) %>% gather() %>% filter(key %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000)))
sin_data <- data.frame(x, y)
predictions <- as.data.frame(bst) %>%
gather(iteration, value) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000)))
sin_data <- data.frame(x, y)
ggplot(sin_data, aes(x, y)) +
geom_point(alpha = .2)
sin_true <- data.frame(x, y = sin(x))
ggplot(sin_data, aes(x, y)) +
geom_point(alpha = .2) +
geom_line(sin_true, aes(x, y), color = "blue")
ggplot(sin_data, aes(x, y)) +
geom_point(alpha = .2) +
geom_line(data = sin_true, aes(x, y), color = "blue")
head(predictions)
as.data.frame(bst) %>%
rbind(sin_true) %>%
head()
as.data.frame(bst) %>%
cbind(sin_true) %>%
head()
sin_data <- data.frame(x, y, sin = sin(x))
head(sin_data)
as.data.frame(bst) %>%
rbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000)))
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000)))
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>% head()
predictions <- as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .2) +
geom_line(aes(x, sin), color = "blue")
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .2) +
geom_line(aes(x, sin), color = "blue")
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .2) +
geom_line(aes(x, sin), color = "blue") +
facet_wrap(~ iteration)
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(iteration = paste("Iteration", stringr::str_extract(iteration, \d+)))
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(iteration = paste("Iteration", stringr::str_extract(iteration, "\d+")))
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")))
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+"))) +
ggplot(aes(x, y)) +
geom_point(alpha = .2) +
geom_line(aes(x, sin), color = "blue") +
facet_wrap(~ iteration)
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+"))) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .2) +
geom_line(aes(x, sin), color = "blue") +
facet_wrap(~ iteration)
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(
iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")) %>% factor() %>% fct_inorder() %>%
ggplot(aes(x, y)) +
geom_point(alpha = .2) +
geom_line(aes(x, sin), color = "blue") +
facet_wrap(~ iteration)
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")) %>% factor()) %>% fct_inorder() %>%
ggplot(aes(x, y)) +
geom_point(alpha = .2) +
geom_line(aes(x, sin), color = "blue") +
facet_wrap(~ iteration)
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")) %>% as.factor()) %>% fct_inorder() %>%
ggplot(aes(x, y)) +
geom_point(alpha = .2) +
geom_line(aes(x, sin), color = "blue") +
facet_wrap(~ iteration)
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")),
iteration = as.factor(iteration)) %>% fct_inorder())
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")),
iteration = as.factor(iteration) %>% fct_inorder())
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")),
iteration = as.factor(iteration) %>% fct_inorder()) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .2) +
geom_line(aes(x, sin), color = "blue") +
facet_wrap(~ iteration)
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(
iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")),
iteration = as.factor(iteration) %>% fct_inorder()
) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .2) +
geom_line(aes(x, sin), color = "blue") +
geom_line(aes(y = value), color = "red") +
facet_wrap(~ iteration)
install.packages("gganimate")
devtools::install_github('thomasp85/gganimate')
library(gganimate)
devtools::install_github('thomasp85/gganimate')
devtools::install_github('thomasp85/gganimate', force = TRUE)
library(gganimate)
library(gganimate)
library(tidyverse)
rpartBoost <- function(X, y, data, num_trees = 100, learn_rate = 0.1,
tree_depth = 6, verbose = FALSE) {
require(rpart)
G_b_hat <- matrix(0, nrow = length(y), ncol = num_trees + 1)
r <- y
for (tree in seq_len(num_trees)) {
if (verbose) {
message("iter ", tree, " of ", num_trees)
}
g_b_tilde <- rpart(r ~ X, control = list(cp = 0, maxdepth = tree_depth))
g_b_hat <- learn_rate * predict(g_b_tilde)
G_b_hat[, tree + 1] <- G_b_hat[, tree] + matrix(g_b_hat)
r <- r - g_b_hat
}
colnames(G_b_hat) <- paste0("tree_", c(0, seq_len(num_trees)))
G_b_hat
}
set.seed(101)
x <- seq(from = 0, to = 2 * pi, length = 500)
y <- sin(x) + rnorm(length(x), sd = 0.3)
bst <- rpartBoost(X = x, y = y, num_trees = 1000, learn_rate = 0.1,
tree_depth = 3, verbose = FALSE)
sin_data <- data.frame(x, y, sin = sin(x))
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(
iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")),
iteration = as.factor(iteration) %>% fct_inorder()
) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .1) +
geom_line(aes(x, sin), color = "blue", size = 1) +
geom_line(aes(y = value), color = "red", size = 1) +
facet_wrap(~ iteration)
sin_data <- data.frame(x, y, sin = sin(x))
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(
iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")),
iteration = as.factor(iteration) %>% fct_inorder()
) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .1) +
geom_line(aes(x, sin), color = "blue", size = 1) +
geom_line(aes(y = value), color = "red", size = 1) +
facet_wrap(~ iteration) + transition_reveal()
sin_data <- data.frame(x, y, sin = sin(x))
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(
iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")),
iteration = as.factor(iteration) %>% fct_inorder()
) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .1) +
geom_line(aes(x, sin), color = "blue", size = 1) +
geom_line(aes(y = value), color = "red", size = 1) +
facet_wrap(~ iteration) + transition_reveal(id = value)
sin_data <- data.frame(x, y, sin = sin(x))
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(
iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")),
iteration = as.factor(iteration) %>% fct_inorder()
) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .1) +
geom_line(aes(x, sin), color = "blue", size = 1) +
geom_line(aes(y = value), color = "red", size = 1) +
facet_wrap(~ iteration) + transition_reveal(id = value, along = x)
sin_data <- data.frame(x, y, sin = sin(x))
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(1000))) %>%
mutate(
iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")),
iteration = as.factor(iteration) %>% fct_inorder()
) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .1) +
geom_line(aes(x, sin), color = "blue", size = 1) +
geom_line(aes(y = value), color = "red", size = 1) +
facet_wrap(~ iteration) + transition_reveal(id = value, along = y)
gitr::git_rdone("started GBM basic idea section")
rpartBoost <- function(X, y, data, num_trees = 100, learn_rate = 0.1,
tree_depth = 6, verbose = FALSE) {
require(rpart)
G_b_hat <- matrix(0, nrow = length(y), ncol = num_trees + 1)
r <- y
for (tree in seq_len(num_trees)) {
if (verbose) {
message("iter ", tree, " of ", num_trees)
}
g_b_tilde <- rpart(r ~ X, control = list(cp = 0, maxdepth = tree_depth))
g_b_hat <- learn_rate * predict(g_b_tilde)
G_b_hat[, tree + 1] <- G_b_hat[, tree] + matrix(g_b_hat)
r <- r - g_b_hat
}
colnames(G_b_hat) <- paste0("tree_", c(0, seq_len(num_trees)))
G_b_hat
}
# Function to plot the predictions from a particular boosting iteration
plotIter <- function(object, iter, show_legend = FALSE, ...) {
plot(x, y, ...)
lines(x, sin(x), lwd = 3, col = cols[2L])
lines(x, object[, iter + 1], lwd = 3, col = cols[1L])
if (show_legend) {
legend("topright", legend = c("Boosted prediction", "True function"),
lty = 1L, lwd = 3L, col = cols[1L:2L], inset = 0.01)
}
}
# Simulate some sine wave data
set.seed(101)
x <- seq(from = 0, to = 2 * pi, length = 500)
y <- sin(x) + rnorm(length(x), sd = 0.3)
# gradient boosted decision trees
bst <- rpartBoost(X = x, y = y, num_trees = 1000, learn_rate = 0.1,
tree_depth = 3, verbose = FALSE)
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(
iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")),
iteration = as.factor(iteration) %>% fct_inorder()
) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .1) +
geom_line(aes(x, sin), color = "blue", size = 1) +
geom_line(aes(y = value), color = "red", size = 1) +
facet_wrap(~ iteration)
library(tidyverse)
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(
iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")),
iteration = as.factor(iteration) %>% fct_inorder()
) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .1) +
geom_line(aes(x, sin), color = "blue", size = 1) +
geom_line(aes(y = value), color = "red", size = 1) +
facet_wrap(~ iteration)
# plot 9 different iterations
sin_data <- data.frame(x, y, sin = sin(x))
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(
iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")),
iteration = as.factor(iteration) %>% fct_inorder()
) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .1) +
geom_line(aes(x, sin), color = "blue", size = 1) +
geom_line(aes(y = value), color = "red", size = 1) +
facet_wrap(~ iteration)
library(gganimate)
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(
iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")),
iteration = as.factor(iteration) %>% fct_inorder()
) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .1) +
geom_line(aes(x, sin), color = "blue", size = 1) +
geom_line(aes(y = value), color = "red", size = 1) +
transitionItime(iteration)
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(
iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")),
iteration = as.factor(iteration) %>% fct_inorder()
) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .1) +
geom_line(aes(x, sin), color = "blue", size = 1) +
geom_line(aes(y = value), color = "red", size = 1) +
transition_time(iteration)
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(
iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")),
iteration = as.factor(iteration) %>% fct_inorder()
) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .1) +
geom_line(aes(x, sin), color = "blue", size = 1) +
geom_line(aes(y = value), color = "red", size = 1) +
transition_events(iteration)
library(gapminder)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent)
install.packages("gapminder")
library(gapminder)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent)
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(
iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")),
iteration = as.factor(iteration) %>% fct_inorder()
) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .1) +
geom_line(aes(x, sin), color = "blue", size = 1) +
geom_line(aes(y = value), color = "red", size = 1)
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(
iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")),
iteration = as.factor(iteration) %>% fct_inorder()
) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .1) +
geom_line(aes(x, sin), color = "blue", size = 1) +
geom_line(aes(y = value), color = "red", size = 1) + transition_reveal(iteration)
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(
iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")),
iteration = as.factor(iteration) %>% fct_inorder()
) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .1) +
geom_line(aes(x, sin), color = "blue", size = 1) +
geom_line(aes(y = value), color = "red", size = 1) + transition_events(iteration)
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(
iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")),
iteration = as.factor(iteration) %>% fct_inorder()
) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .1) +
geom_line(aes(x, sin), color = "blue", size = 1) +
geom_line(aes(y = value), color = "red", size = 1) + transition_events(id = value, along = iteration)
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(
iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")),
iteration = as.factor(iteration) %>% fct_inorder()
) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .1) +
geom_line(aes(x, sin), color = "blue", size = 1) +
geom_line(aes(y = value), color = "red", size = 1) + transition_reveal(id = value, along = iteration)
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(iteration = stringr::str_extract(iteration, "[[:digit:]]+")) %>% as.numeric) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .1) +
geom_line(aes(x, sin), color = "blue", size = 1) +
geom_line(aes(y = value), color = "red", size = 1) + transition_reveal(id = value, along = iteration)
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(iteration = stringr::str_extract(iteration, "[[:digit:]]+")) %>% as.numeric)
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(iteration = stringr::str_extract(iteration, "[[:digit:]]+") %>% as.numeric)
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(iteration = stringr::str_extract(iteration, "[[:digit:]]+") %>% as.numeric) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .1) +
geom_line(aes(x, sin), color = "blue", size = 1) +
geom_line(aes(y = value), color = "red", size = 1) + transition_reveal(id = value, along = iteration)
