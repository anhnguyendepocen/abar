partial(pred.var = "Neighborhood", n.trees = gbm_final_fit$n.trees, train = as.data.frame(ames_train)) %>%
ggplot(aes(yhat, reorder(Neighborhood, yhat))) +
geom_point() +
ylab(NULL) +
scale_x_continuous(labels = scales::dollar)
gbm_final_fit %>%
partial(pred.var = "Neighborhood", n.trees = gbm_final_fit$n.trees, train = as.data.frame(ames_train), ice = TRUE) %>%
ggplot(aes(yhat, reorder(Neighborhood, yhat))) +
geom_point() +
ylab(NULL) +
scale_x_continuous(labels = scales::dollar)
gbm_final_fit %>%
partial(pred.var = "Neighborhood", n.trees = gbm_final_fit$n.trees, train = as.data.frame(ames_train), ice = TRUE) %>%
ggplot(aes(yhat, reorder(Neighborhood, yhat))) +
geom_boxplot() +
ylab(NULL) +
scale_x_continuous(labels = scales::dollar)
gbm_final_fit %>%
partial(pred.var = "Neighborhood", n.trees = gbm_final_fit$n.trees, train = as.data.frame(ames_train), ice = TRUE) %>%
ggplot(aes(reorder(Neighborhood, yhat), yhat)) +
geom_boxplot() +
xlab(NULL) +
scale_y_continuous(labels = scales::dollar) + coord_flip()
df <- rsample::attrition %>% dplyr::mutate_if(is.ordered, factor, ordered = FALSE)
# Create training (70%) and test (30%) sets for the rsample::attrition data.
# Use set.seed for reproducibility
set.seed(123)
churn_split <- initial_split(df, prop = .7, strata = "Attrition")
churn_train <- training(churn_split)
churn_test  <- testing(churn_split)
# create a tuning grid
gbm_grid <- expand.grid(
interaction.depth = seq(1, 5, by = 2),
shrinkage = c(.01, .1, .3),
n.minobsinnode = c(5, 10, 15),
n.trees = 5000
)
gbm_grid <- gbm_grid[1, ]
gbm_grid
features <- subset(churn_train, select = -Attrition) %>% as.data.frame()
response <- churn_train$Attrition
kfold <- trainControl(method = "cv", number = 5)
gbm_churn <- train(
x = features,
y = response,
method = "gbm",
distribution = "bernoulli",
metric = "AUC",
tuneGrid = gbm_grid2,
trControl = kfold,
verbose = FALSE
)
?train
gbm_churn <- train(
x = features,
y = response,
method = "gbm",
distribution = "bernoulli",
tuneGrid = gbm_grid,
trControl = kfold,
verbose = FALSE
)
gbm_churn$bestTune
min(gbm_churn$results$Accuracy)
plot(gbm_churn)
gbm_churn$finalModel
gbm_grid <- expand.grid(
interaction.depth = seq(1, 5, by = 2),
shrinkage = c(.01, .1, .3),
n.minobsinnode = c(5, 10, 15),
n.trees = 5000
)
gbm_churn <- train(
x = features,
y = response,
method = "gbm",
distribution = "bernoulli",
tuneGrid = gbm_grid,
trControl = kfold,
verbose = FALSE
)
gbm_churn$bestTune
min(gbm_churn$results$Accuracy)
max(gbm_churn$results$Accuracy)
# get attrition data
df <- rsample::attrition %>% dplyr::mutate_if(is.ordered, factor, ordered = FALSE)
# Create training (70%) and test (30%) sets for the rsample::attrition data.
# Use set.seed for reproducibility
set.seed(123)
churn_split <- initial_split(df, prop = .7, strata = "Attrition")
churn_train <- training(churn_split)
churn_test  <- testing(churn_split)
# create a tuning grid
gbm_grid <- expand.grid(
interaction.depth = seq(1, 5, by = 2),
shrinkage = c(.01, .1, .3),
n.minobsinnode = c(5, 10, 15),
n.trees = 5000
)
# create train() parameters
features <- subset(churn_train, select = -Attrition) %>% as.data.frame()
response <- churn_train$Attrition
kfold <- trainControl(method = "cv", number = 10)
# cross validated model
gbm_churn <- train(
x = features,
y = response,
method = "gbm",
distribution = "bernoulli",
tuneGrid = gbm_grid,
trControl = kfold,
verbose = FALSE
)
gbm_churn
gbm_grid <- expand.grid(
interaction.depth = 1,
shrinkage = 0.01,
n.minobsinnode = 5,
n.trees = c(5000, 10000)
)
gbm_churn <- train(
x = features,
y = response,
method = "gbm",
distribution = "bernoulli",
tuneGrid = gbm_grid,
trControl = trainControl(method = "cv", number = 10),
verbose = FALSE
)
gbm_churn
gbm_grid <- expand.grid(
interaction.depth = seq(1, 5, by = 2),
shrinkage = c(.01, .1, .3),
n.minobsinnode = c(5, 10, 15),
n.trees = c(5000, 10000)
)
# create train() parameters
features <- subset(churn_train, select = -Attrition) %>% as.data.frame()
response <- churn_train$Attrition
kfold <- trainControl(method = "cv", number = 10)
# cross validated model
gbm_churn <- train(
x = features,
y = response,
method = "gbm",
distribution = "bernoulli",
tuneGrid = gbm_grid,
trControl = kfold,
verbose = FALSE
)
gbm_churn
gbm_churn$bestTune
plot(gbm_churn)
max(gbm_churn$results$Accuracy)
glm_mod <- train(
Attrition ~ .,
data = churn_train,
method = "glm",
family = "binomial",
preProc = c("zv", "center", "scale"),
trControl = trainControl(method = "cv", number = 10)
)
# train regularized logistic regression model
penalized_mod <- train(
Attrition ~ .,
data = churn_train,
method = "glmnet",
family = "binomial",
preProc = c("zv", "center", "scale"),
trControl = trainControl(method = "cv", number = 10),
tuneLength = 10
)
hyper_grid <- expand.grid(
degree = 1:3,
nprune = seq(2, 100, length.out = 10) %>% floor()
)
tuned_mars <- train(
x = subset(churn_train, select = -Attrition),
y = churn_train$Attrition,
method = "earth",
trControl = trainControl(method = "cv", number = 10),
tuneGrid = hyper_grid
)
hyper_grid <- expand.grid(
mtry            = seq(3, 18, by = 3),
min.node.size   = seq(1, 10, by = 3),
splitrule       = c("gini", "extratrees")
)
tuned_rf <- train(
x = subset(churn_train, select = -Attrition),
y = churn_train$Attrition,
method = "ranger",
trControl = trainControl(method = "cv", number = 10),
tuneGrid = hyper_grid,
num.trees = 500,
seed = 123
)
summary(resamples(list(
Logistic_model = glm_mod,
Elastic_net = penalized_mod,
MARS_model = tuned_mars,
RF_model = tuned_rf,
GBM_model = gbm_churn,
)))$statistics$Accuracy
summary(resamples(list(
Logistic_model = glm_mod,
Elastic_net = penalized_mod,
MARS_model = tuned_mars,
RF_model = tuned_rf,
GBM_model = gbm_churn,
)))$statistics$Accuracy
summary(resamples(list(
Logistic_model = glm_mod,
Elastic_net = penalized_mod
)))$statistics$Accuracy
summary(resamples(list(
Logistic_model = glm_mod,
Elastic_net = penalized_mod,
MARS_model = tuned_mars,
RF_model = tuned_rf,
GBM_model = gbm_churn
)))$statistics$Accuracy
gbm_attrition_model_comparison <- summary(resamples(list(
Logistic_model = glm_mod,
Elastic_net = penalized_mod,
MARS_model = tuned_mars,
RF_model = tuned_rf,
GBM_model = gbm_churn,
)))$statistics$Accuracy
gbm_attrition_model_comparison <- summary(resamples(list(
Logistic_model = glm_mod,
Elastic_net = penalized_mod,
MARS_model = tuned_mars,
RF_model = tuned_rf,
GBM_model = gbm_churn
)))$statistics$Accuracy
?saveRDS
saveRDS(gbm_attrition_model_comparison, file = "data/gbm_attrition_model_comparison.rds")
saveRDS(gbm_attrition_model_comparison, file = "data/gbm_attrition_model_comparison.rds")
readRDS("data/gbm_attrition_model_comparison.rds")
kableExtra::kable() %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
rm(gbm_attrition_model_comparison)
readRDS("data/gbm_attrition_model_comparison.rds")
kableExtra::kable(gbm_attrition_model_comparison) %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
readRDS("data/gbm_attrition_model_comparison")
readRDS("data/gbm_attrition_model_comparison.rds")
kableExtra::kable(gbm_attrition_model_comparison) %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
?readRDS
load("data/gbm_attrition_model_comparison.rds")
readRDS("data/gbm_attrition_model_comparison.rds")
kableExtra::kable(gbm_attrition_model_comparison) %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
readRDS("data/gbm_attrition_model_comparison.rds")
kableExtra::kable(gbm_attrition_model_comparison) %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
readRDS("data/gbm_attrition_model_comparison.rds") %>%
kableExtra::kable() %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
gitr::git_rdone("finished adding GBM code")
iter = 6
par(mfrow = c(3, 3))
for(i in 1:iter){
set.seed(i+30)
# create train/test sets
train_index <- caret::createDataPartition(pdp::boston$cmedv, p = .6333,
list = FALSE,
times = 1)
train_DF <- pdp::boston[train_index,]
validate_DF <- pdp::boston[-train_index,]
train_y <- train_DF$cmedv
train_x <- train_DF[, setdiff(names(train_DF), "cmedv")]
validate_y <- validate_DF$cmedv
validate_x <- validate_DF[, setdiff(names(validate_DF), "cmedv")]
d_tree <- rpart::rpart(cmedv ~ ., train_DF)
# graphs
rpart.plot::rpart.plot(d_tree, main = paste0("Decision Tree ", i), type = 0, extra = 0)
}
cols <- RColorBrewer::brewer.pal(9, "Set1")
# Function to implement gradient boosting with squared-error loss. Based on
# algorithm 17.2 on page 333 of Computer Age Statistical Inference, by Bradley
# Efron amd Trevor Hastie
rpartBoost <- function(X, y, data, num_trees = 100, learn_rate = 0.1,
tree_depth = 6, verbose = FALSE) {
require(rpart)
G_b_hat <- matrix(0, nrow = length(y), ncol = num_trees + 1)
r <- y
for (tree in seq_len(num_trees)) {
if (verbose) {
message("iter ", tree, " of ", num_trees)
}
g_b_tilde <- rpart(r ~ X, control = list(cp = 0, maxdepth = tree_depth))
g_b_hat <- learn_rate * predict(g_b_tilde)
G_b_hat[, tree + 1] <- G_b_hat[, tree] + matrix(g_b_hat)
r <- r - g_b_hat
}
colnames(G_b_hat) <- paste0("tree_", c(0, seq_len(num_trees)))
G_b_hat
}
# Function to plot the predictions from a particular boosting iteration
plotIter <- function(object, iter, show_legend = FALSE, ...) {
plot(x, y, ...)
lines(x, sin(x), lwd = 3, col = cols[2L])
lines(x, object[, iter + 1], lwd = 3, col = cols[1L])
if (show_legend) {
legend("topright", legend = c("Boosted prediction", "True function"),
lty = 1L, lwd = 3L, col = cols[1L:2L], inset = 0.01)
}
}
# Simulate some sine wave data
set.seed(101)
x <- seq(from = 0, to = 2 * pi, length = 500)
y <- sin(x) + rnorm(length(x), sd = 0.3)
plot(x, y)
# gradient boosted decision trees
bst <- rpartBoost(X = x, y = y, num_trees = 1000, learn_rate = 0.1,
tree_depth = 3, verbose = TRUE)
# Plot first 15 iterations
par(mfrow = c(3, 3))
for (i in c(0, 5, 10, 15, 25, 50, 100, 500, 1000)) {
plotIter(bst, iter = i, main = paste("Iter:", i))
}
bst <- rpartBoost(X = x, y = y, num_trees = 1000, learn_rate = 0.1,
tree_depth = 3, verbose = FALSE)
par(mfrow = c(3, 3))
for (i in c(0, 5, 10, 15, 20, 25, 30, 35, 40)) {
plotIter(bst, iter = i, main = paste("Iter:", i))
}
par(mfrow = c(4, 4))
for (i in 0:11) {
plotIter(bst, iter = i, main = paste("Iter:", i))
}
par(mfrow = c(3, 3))
for (i in c(0, 5, 10, 20, 40, 80, 160, 320, 640)) {
plotIter(bst, iter = i, main = paste("Iter:", i))
}
for (i in c(0, 5, 10, 15, 25, 50, 100, 500, 1000)) {
plotIter(bst, iter = i, main = paste("Iter:", i))
}
bst
class(bst)
bst[1]
bst[1,1]
bst[1:2,1:2]
bst[,1:2]
bst
as.data.frame(bs)
as.data.frame(bst)
library(tidyverse)
as.data.frame(bst) %>% gather()
as.data.frame(bst) %>% gather() %>% filter(key %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000)))
sin_data <- data.frame(x, y)
predictions <- as.data.frame(bst) %>%
gather(iteration, value) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000)))
sin_data <- data.frame(x, y)
ggplot(sin_data, aes(x, y)) +
geom_point(alpha = .2)
sin_true <- data.frame(x, y = sin(x))
ggplot(sin_data, aes(x, y)) +
geom_point(alpha = .2) +
geom_line(sin_true, aes(x, y), color = "blue")
ggplot(sin_data, aes(x, y)) +
geom_point(alpha = .2) +
geom_line(data = sin_true, aes(x, y), color = "blue")
head(predictions)
as.data.frame(bst) %>%
rbind(sin_true) %>%
head()
as.data.frame(bst) %>%
cbind(sin_true) %>%
head()
sin_data <- data.frame(x, y, sin = sin(x))
head(sin_data)
as.data.frame(bst) %>%
rbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000)))
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000)))
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>% head()
predictions <- as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .2) +
geom_line(aes(x, sin), color = "blue")
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .2) +
geom_line(aes(x, sin), color = "blue")
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .2) +
geom_line(aes(x, sin), color = "blue") +
facet_wrap(~ iteration)
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(iteration = paste("Iteration", stringr::str_extract(iteration, \d+)))
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(iteration = paste("Iteration", stringr::str_extract(iteration, "\d+")))
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")))
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+"))) +
ggplot(aes(x, y)) +
geom_point(alpha = .2) +
geom_line(aes(x, sin), color = "blue") +
facet_wrap(~ iteration)
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+"))) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .2) +
geom_line(aes(x, sin), color = "blue") +
facet_wrap(~ iteration)
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(
iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")) %>% factor() %>% fct_inorder() %>%
ggplot(aes(x, y)) +
geom_point(alpha = .2) +
geom_line(aes(x, sin), color = "blue") +
facet_wrap(~ iteration)
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")) %>% factor()) %>% fct_inorder() %>%
ggplot(aes(x, y)) +
geom_point(alpha = .2) +
geom_line(aes(x, sin), color = "blue") +
facet_wrap(~ iteration)
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")) %>% as.factor()) %>% fct_inorder() %>%
ggplot(aes(x, y)) +
geom_point(alpha = .2) +
geom_line(aes(x, sin), color = "blue") +
facet_wrap(~ iteration)
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")),
iteration = as.factor(iteration)) %>% fct_inorder())
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")),
iteration = as.factor(iteration) %>% fct_inorder())
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")),
iteration = as.factor(iteration) %>% fct_inorder()) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .2) +
geom_line(aes(x, sin), color = "blue") +
facet_wrap(~ iteration)
as.data.frame(bst) %>%
cbind(sin_data) %>%
gather(iteration, value, tree_0:tree_1000) %>%
filter(iteration %in% paste0("tree_", c(0, 5, 10, 15, 25, 50, 100, 500, 1000))) %>%
mutate(
iteration = paste("Iteration", stringr::str_extract(iteration, "[[:digit:]]+")),
iteration = as.factor(iteration) %>% fct_inorder()
) %>%
ggplot(aes(x, y)) +
geom_point(alpha = .2) +
geom_line(aes(x, sin), color = "blue") +
geom_line(aes(y = value), color = "red") +
facet_wrap(~ iteration)
install.packages("gganimate")
devtools::install_github('thomasp85/gganimate')
library(gganimate)
devtools::install_github('thomasp85/gganimate')
devtools::install_github('thomasp85/gganimate', force = TRUE)
library(gganimate)
