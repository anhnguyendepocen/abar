[
["logistic-regression.html", "Chapter 6 Logistic regression 6.1 Prerequisites 6.2 Why logistic regression 6.3 Simple logistic regression 6.4 Multiple logistic regression 6.5 Assessing model accuracy 6.6 Model interpretation 6.7 Final thoughts 6.8 Learning more", " Chapter 6 Logistic regression Linear regression is used to approximate the relationship between a continuous response variable and a set of predictor variables. However, when the response variable is categorical rather than continuous, linear regression is not appropriate. Fortunately, analysts can turn to an analogous method, logistic regression, which is similar to linear regression in many ways. This chapter explores the use of logistic regression for binary response variables. Logistic regression can be expanded for multinomial problems (see Faraway (2016) for discussion of multinomial logistic regression in R); however, that goes beyond our intent here. 6.1 Prerequisites For this section we will use the following packages: library(tidyverse) # data manipulation &amp; visualization library(rsample) # data splitting library(caret) # logistic regression modeling library(vip) # variable importance To illustrate logistic regression concepts we will use the employee attrition data, where our intent is to predict the Attrition response variable (“Yes”|“no”). As in the previous chapter, we’ll set aside 30% of our data as a test set to assess our generalizability error. df &lt;- attrition %&gt;% mutate_if(is.ordered, factor, ordered = FALSE) # Create training (70%) and test (30%) sets for the rsample::attrition data. # Use set.seed for reproducibility set.seed(123) churn_split &lt;- initial_split(df, prop = .7, strata = &quot;Attrition&quot;) train &lt;- training(churn_split) test &lt;- testing(churn_split) 6.2 Why logistic regression To provide a clear motivation of logistic regression, assume we have credit card default data for customers and we want to understand if the credit card balance the customer has is an indicator of whether or not the customer will default on their credit card. To classify a customer as a high- vs. low-risk defaulter based on their balance we could use linear regression; however, the left plot in Figure 6.1 illustrates how linear regression would predict the probability of defaulting. Unfortunately, for balances close to zero we predict a negative probability of defaulting; if we were to predict for very large balances, we would get values bigger than 1. These predictions are not sensible, since of course the true probability of defaulting, regardless of credit card balance, must fall between 0 and 1. Contrast this with the logistic regression line (right plot) that is nonlinear (sigmoidal-shaped). Figure 6.1: Comparing the predicted probabilities of linear regression (left) to logistic regression (right). Predicted probabilities using linear regression results in flawed logic whereas predicted values from logistic regression will always lie between 0 and 1. To avoid the inadequecies of the linear model fit on a binary response, we must model the probability of our response using a function that gives outputs between 0 and 1 for all values of \\(X\\). Many functions meet this description. In logistic regression, we use the logistic function, which is defined in Equation (6.1) and produces the S-curve in the right plot above. \\[\\begin{equation} \\tag{6.1} p(X) = \\frac{e^{\\beta_0 + \\beta_1X}}{1 + e^{\\beta_0 + \\beta_1X}} \\end{equation}\\] The \\(\\beta_i\\) parameters represent the coefficients as in linear regression and \\(p(x)\\) may be interpreted as the probability that the positive class (default in the above example) is present. The minimum for \\(p(x)\\) is obtained at \\(\\text{lim}_{a \\rightarrow -\\infty} \\big[ \\frac{e^a}{1+e^a} \\big] = 0\\), and the maximium for \\(p(x)\\) is obtained at \\(\\text{lim}_{a \\rightarrow \\infty} \\big[ \\frac{e^a}{1+e^a} \\big] = 1\\) which restricts the output probabilities to 0-1. Furthermore, a useful transformation for logistic regression is the logit transformation with follows: \\[\\begin{equation} \\tag{6.2} g(X) = \\text{ln} \\bigg[ \\frac{p(x)}{1 - p(x)} \\bigg] = \\beta_0 + \\beta_1x \\end{equation}\\] The logit transformation exhibits several attractive properties of the linear regression model such as its linearity and interpretability, which we will come back to shortly. 6.3 Simple logistic regression We will fit two logistic regression models in order to predict the probability of an employee attriting. The first predicts the probability of attrition based on their monthly income (MonthlyIncome) and the second is based on whether or not the employee works overtime (OverTime). The glm function fits generalized linear models, a class of models that includes logistic regression. The syntax of the glm function is similar to that of lm, except that we must pass the argument family = binomial in order to tell R to run a logistic regression rather than some other type of generalized linear model. model1 &lt;- glm(Attrition ~ MonthlyIncome, family = &quot;binomial&quot;, data = train) model2 &lt;- glm(Attrition ~ OverTime, family = &quot;binomial&quot;, data = train) In the background glm, uses maximum likelihood to fit the model. The basic intuition behind using maximum likelihood to fit a logistic regression model is as follows: we seek estimates for \\(\\beta_0\\) and \\(\\beta_1\\) such that the predicted probability \\(\\hat p(x_i)\\) of attrition for each employee corresponds as closely as possible to the employee’s observed attrition status. In other words, we try to find \\(\\hat \\beta_0\\) and \\(\\hat \\beta_1\\) such that plugging these estimates into the model for \\(p(x)\\) (Equation (6.1)) yields a number close to one for all employees who attrited, and a number close to zero for all employees who did not. This intuition can be formalized using a mathematical equation called a likelihood function: \\[\\begin{equation} \\tag{6.3} \\ell(\\beta_0, \\beta_1) = \\prod_{i:y_i=1}p(x_i) \\prod_{i&#39;:y_i&#39;=0}(1-p(x_i&#39;)) \\end{equation}\\] The estimates \\(\\beta_0\\) and \\(\\beta_1\\) are chosen to maximize this likelihood function. Maximum likelihood is a very general approach that is used to fit many of the non-linear models that we will examine in future chapters. What results is the predicted probability of attrition. Figure 6.2 illustrates the predicted probablities for the two models. Figure 6.2: Predicted probablilities of employee attrition based on monthly income (left) and overtime (right). As monthly income increases, model1 predicts a decreased probability of attrition and if employees work overtime model2 predicts an increased probability. The below table shows the coefficient estimates and related information that result from fitting a logistic regression model in order to predict the probability of Attrition = Yes for our two models. Bear in mind that the coefficient estimates from logistic regression characterize the relationship between the predictor and response variable on a log-odds scale. Thus, we see that the MonthlyIncome \\(\\hat \\beta_1 =\\) -1.144649210^{-4}. This indicates that an increase in MonthlyIncome is associated with a decrease in the probability of attrition. To be precise, a one-unit increase in MonthlyIncome is associated with a decrease in the log odds of attrition by -1.144649210^{-4} units. Similarly for model2, an employee that works OverTime has an increase of 1.3076258 logg odds of attrition. tidy(model1) ## # A tibble: 2 x 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) -0.984 0.152 -6.47 9.62e-11 ## 2 MonthlyIncome -0.000114 0.0000244 -4.69 2.74e- 6 tidy(model2) ## # A tibble: 2 x 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) -2.14 0.120 -17.9 2.21e-71 ## 2 OverTimeYes 1.31 0.175 7.47 8.03e-14 Taking an exponential transformation of these coefficients converts them from log odds to odds. Furthermore, we can convert odds to a probability with \\(\\text{probability} = \\frac{odds}{1 + odds}\\) Thus, for every one dollar increase in MonthlyIncome, the odds of an employee attriting decreases slightly, represented by a slightly less than 50% probability. Whereas an employee that works OverTime has nearly 4-1 odds of attriting over an employee that does not work OverTime, represented by an increased probability of 78.7%. # convert to odds exp(coef(model1)) ## (Intercept) MonthlyIncome ## 0.3739904 0.9998855 exp(coef(model2)) ## (Intercept) OverTimeYes ## 0.1178248 3.6973851 # convert to probability exp(coef(model1)) / (1 + exp(coef(model1))) ## (Intercept) MonthlyIncome ## 0.2721929 0.4999714 exp(coef(model2)) / (1 + exp(coef(model2))) ## (Intercept) OverTimeYes ## 0.1054054 0.7871156 Many aspects of the coefficient output are similar to those discussed in the linear regression output. For example, we can measure the confidence intervals and accuracy of the coefficient estimates by computing their standard errors. For instance, both models’s \\(\\hat \\beta_1\\) have a p-value &lt; 0.05 suggesting a strong probability that a relationship between these predictors and the probability of attrition exists. We can also use the standard errors to get confidence intervals as we did in the linear regression tutorial: confint(model1) ## 2.5 % 97.5 % ## (Intercept) -1.2812811971 -6.848677e-01 ## MonthlyIncome -0.0001648285 -6.889915e-05 confint(model2) ## 2.5 % 97.5 % ## (Intercept) -2.3807720 -1.910857 ## OverTimeYes 0.9652939 1.652362 6.4 Multiple logistic regression We can also extend our model as seen in Eq. 1 so that we can predict a binary response using multiple predictors where \\(X = (X_1,\\dots, X_p)\\) are p predictors: \\[\\begin{equation} \\tag{6.4} p(X) = \\frac{e^{\\beta_0 + \\beta_1X + \\cdots + \\beta_pX_p }}{1 + e^{\\beta_0 + \\beta_1X + \\cdots + \\beta_pX_p}} \\end{equation}\\] Let’s go ahead and fit a model that predicts the probability of Attrition based on the MonthlyIncome and OverTime. Our results show that both features are statistically significant and Figure 6.3 illustrates common trends between MonthlyIncome and Attrition; however, working OverTime tends to nearly double the probability of attrition. model3 &lt;- glm(Attrition ~ MonthlyIncome + OverTime, family = &quot;binomial&quot;, data = train) tidy(model3) ## # A tibble: 3 x 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) -1.44 0.173 -8.32 9.00e-17 ## 2 MonthlyIncome -0.000124 0.0000254 -4.88 1.06e- 6 ## 3 OverTimeYes 1.36 0.179 7.61 2.75e-14 Figure 6.3: Predicted probability of attrition based on monthly income and whether or not employees work overtime. 6.5 Assessing model accuracy With a basic understanding of logistic regression under our belt, similar to linear regression our concern now shifts to how well do our models predict. As in the last chapter, we will use caret::train and fit three 10-fold cross validated logistic regression models. Extracting the accuracy measures, we see that both cv_model1 and cv_model2 had an average accuracy of 83.89%. However, cv_model3 which used all predictor variables in our data achieved an average accuracy rate of 86.3%. set.seed(123) cv_model1 &lt;- train( Attrition ~ MonthlyIncome, data = train, method = &quot;glm&quot;, family = &quot;binomial&quot;, trControl = trainControl(method = &quot;cv&quot;, number = 10) ) set.seed(123) cv_model2 &lt;- train( Attrition ~ MonthlyIncome + OverTime, data = train, method = &quot;glm&quot;, family = &quot;binomial&quot;, trControl = trainControl(method = &quot;cv&quot;, number = 10) ) set.seed(123) cv_model3 &lt;- train( Attrition ~ ., data = train, method = &quot;glm&quot;, family = &quot;binomial&quot;, trControl = trainControl(method = &quot;cv&quot;, number = 10) ) # extract out of sample performance measures summary(resamples(list( model1 = cv_model1, model2 = cv_model2, model3 = cv_model3 )))$statistics$Accuracy ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## model1 0.8349515 0.8353482 0.8365385 0.8388542 0.8431373 0.8446602 0 ## model2 0.8349515 0.8353482 0.8365385 0.8388542 0.8431373 0.8446602 0 ## model3 0.8058252 0.8389423 0.8585570 0.8631848 0.8949172 0.9134615 0 We can get greater understanding of our model’s performance by assessing the confusion matrix (see section 4.7.7). We can use train::confusionMatrix to compute a confusion matrix. We need to supply our model’s predicted class and the actuals from our trainin data. Our confusion matrix provides a host of information. Particularly, we can see that although we do well predicting cases of non-attrition (note the high specificity), our model does particularly poor predicting actual cases of attrition (note the low sensitivity). By default the predict function predicts the response class for a caret model; however, you can change the type argument to predict the probabilities (see ?predict.train). # predict class pred_class &lt;- predict(cv_model3, train) # create confusion matrix confusionMatrix(relevel(pred_class, ref = &quot;Yes&quot;), relevel(train$Attrition, ref = &quot;Yes&quot;)) ## Confusion Matrix and Statistics ## ## Reference ## Prediction Yes No ## Yes 79 33 ## No 87 831 ## ## Accuracy : 0.8835 ## 95% CI : (0.8623, 0.9025) ## No Information Rate : 0.8388 ## P-Value [Acc &gt; NIR] : 3.051e-05 ## ## Kappa : 0.5039 ## Mcnemar&#39;s Test P-Value : 1.310e-06 ## ## Sensitivity : 0.4759 ## Specificity : 0.9618 ## Pos Pred Value : 0.7054 ## Neg Pred Value : 0.9052 ## Prevalence : 0.1612 ## Detection Rate : 0.0767 ## Detection Prevalence : 0.1087 ## Balanced Accuracy : 0.7189 ## ## &#39;Positive&#39; Class : Yes ## One thing to point out, in the confusion matrix above you will note the metric No Information Rate: 0.8388. This represents the ratio of non-attrition versus attrition in our trainin data (table(train$Attrition) %&gt;% prop.table()). Consequently, if we simply predicted “No” for every employee we would still get an accuracy rate of 83.88%. Therefore, our goal is to maximize our accuracy rate over and above this no information benchmark while also trying to balance sensitivity and specificity. To understand how well we are achieving this we can visualize the ROC curve (section 4.7.7). If we compare our simple model (cv_model1) to our full model cv_model3, we can see that we the lift achieved with the more accurate model. library(ROCR) # create predicted probabilities m1_prob &lt;- predict(cv_model1, train, type = &quot;prob&quot;)$Yes m3_prob &lt;- predict(cv_model3, train, type = &quot;prob&quot;)$Yes # compute AUC metrics for cv_model1 and cv_model3 perf1 &lt;- prediction(m1_prob, train$Attrition) %&gt;% performance(measure = &quot;tpr&quot;, x.measure = &quot;fpr&quot;) perf2 &lt;- prediction(m3_prob, train$Attrition) %&gt;% performance(measure = &quot;tpr&quot;, x.measure = &quot;fpr&quot;) # plot both ROC curves for cv_model1 and cv_model3 plot(perf1, col = &quot;black&quot;, lty = 2) plot(perf2, add = TRUE, col = &quot;blue&quot;) legend(.8, .2, legend = c(&quot;cv_model1&quot;, &quot;cv_model3&quot;), col = c(&quot;black&quot;, &quot;blue&quot;), lty = 2:1, cex = 0.6) Figure 6.4: ROC curve for cv_model1 and cv_model3. The increase in the AUC represents the ‘lift’ that we achieve with cv_model3. Similar to linear regression, we can perform a PLS logistic regression to assess if reducing the dimension of our numeric predictors helps to achieve improved accuracy. There are 16 numeric features in our data set so the following performs a 10-fold cross-validated PLS model while tuning the number of principal components to use from 1-16. The optimal model uses 14 principal components, which is not reducing the dimension by much. However, the mean accuracy of 0.866 was only marginally better than the average CV accuracy of cv_model3 (0.863), likely within the margin of error. # perform 10-fold cross validation on a PLS model tuning the number of # principal components to use as predictors from 1-20 set.seed(123) cv_model_pls &lt;- train( Attrition ~ ., data = train, method = &quot;pls&quot;, family = &quot;binomial&quot;, trControl = trainControl(method = &quot;cv&quot;, number = 10), preProcess = c(&quot;zv&quot;, &quot;center&quot;, &quot;scale&quot;), tuneLength = 16 ) # model with lowest RMSE cv_model_pls$bestTune ## ncomp ## 14 14 # plot cross-validated RMSE plot(cv_model_pls) Figure 6.5: The 10-fold cross valdation RMSE obtained using PLS with 1-16 principal components. 6.6 Model interpretation Similar to linear regression, once our preferred logistic regression model is identified, next we need to interpret how the features are influencing the results. As with normal linear regression models, variable importance for logistic regression models are computed with the absolute value of the t-statistic for each model parameter is used. Using vip we can extract our top 20 influential variables. Figure 6.6 illustrates that OverTime is the most influential followed by JobSatisfaction, NumCompaniesWorked, and EnvironmentSatisfaction. vip(cv_model3, num_features = 20) Figure 6.6: Top 20 most important variables for the PLS model. Similar to linear regression, logistic regression assumes a monotonic linear relationship. However, the linear relationship is in the form of a log-odds probability; therefore, the regular probability relationship will have a curvilinear effect. This is illustrated in Figure 6.7 by the change in predicted probability of attrition associated with the marginal change in the number of companies an employee has work for (NumCompaniesWorked). Employees that have experienced more employment changes tend to have a high probability of making another future change. Furthermore, the partial dependence plots for the three top categorical predictors (OverTime, JobSatisfaction, and EnvironmentSatisfaction) illustrate the change in predicted probability of attrition based on the employee’s status for each predictor. See the supplemental material at [https://github.com/koalaverse/abar](https://github.com/koalaverse/abar] for the code to produce the following plots. Figure 6.7: Partial dependence plots for the first four most important variables. We can see how the predicted probability of attrition changes for each value of the influential predictors. 6.7 Final thoughts Logistic regression is a natural starting point for learning predictive models for classification purposes due to its similarity to linear regression. Later chapters will build on the concepts illustrated in this chapter and will compare cross-validated performance results to identify the best predictive model for our employee attrition problem. The following summarizes some of the advantages and disadvantages discussed regarding logistic regression. FIXME: refine this section Advantages: Disadvantages: 6.8 Learning more This will get you up and running with logistic regression. Keep in mind that there is a lot more you can dig into so the following resources will help you learn more: An Introduction to Statistical Learning Applied Predictive Modeling Elements of Statistical Learning References "]
]
